// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview
 * some functions for browser-side pretty printing of code contained in html.
 *
 * <p>
 * For a fairly comprehensive set of languages see the
 * <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs">README</a>
 * file that came with this source.  At a minimum, the lexer should work on a
 * number of languages including C and friends, Java, Python, Bash, SQL, HTML,
 * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk
 * and a subset of Perl, but, because of commenting conventions, doesn't work on
 * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.
 * <p>
 * Usage: <ol>
 * <li> include this source file in an html page via
 *   {@code <script type="text/javascript" src="/path/to/prettify.js"></script>}
 * <li> define style rules.  See the example page for examples.
 * <li> mark the {@code <pre>} and {@code <code>} tags in your source with
 *    {@code class=prettyprint.}
 *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty
 *    printer needs to do more substantial DOM manipulations to support that, so
 *    some css styles may not be preserved.
 * </ol>
 * That's it.  I wanted to keep the API as simple as possible, so there's no
 * need to specify which language the code is in, but if you wish, you can add
 * another class to the {@code <pre>} or {@code <code>} element to specify the
 * language, as in {@code <pre class="prettyprint lang-java">}.  Any class that
 * starts with "lang-" followed by a file extension, specifies the file type.
 * See the "lang-*.js" files in this directory for code that implements
 * per-language file handlers.
 * <p>
 * Change log:<br>
 * cbeust, 2006/08/22
 * <blockquote>
 *   Java annotations (start with "@") are now captured as literals ("lit")
 * </blockquote>
 * @requires console
 */
// JSLint declarations
/*global console, document, navigator, setTimeout, window */
/**
 * Split {@code prettyPrint} into multiple timeouts so as not to interfere with
 * UI events.
 * If set to {@code false}, {@code prettyPrint()} is synchronous.
 */
window.PR_SHOULD_USE_CONTINUATION=!0,function(){function k(e,t,n,r){if(!t)return;var i={sourceCode:t,basePos:e};n(i),r.push.apply(r,i.decorations)}function A(e){var t=undefined;for(var n=e.firstChild;n;n=n.nextSibling){var r=n.nodeType;t=r===1?t?e:n:r===3?L.test(n.nodeValue)?e:t:t}return t===e?undefined:t}function O(e,t){var n={},r;(function(){var i=e.concat(t),s=[],o={};for(var u=0,a=i.length;u<a;++u){var f=i[u],l=f[3];if(l)for(var c=l.length;--c>=0;)n[l.charAt(c)]=f;var h=f[1],p=""+h;o.hasOwnProperty(p)||(s.push(h),o[p]=null)}s.push(/[\0-\uffff]/),r=combinePrefixPatterns(s)})();var i=t.length,s=function(e){var o=e.sourceCode,u=e.basePos,a=[u,w],f=0,l=o.match(r)||[],c={};for(var h=0,p=l.length;h<p;++h){var d=l[h],v=c[d],m=void 0,g;if(typeof v=="string")g=!1;else{var y=n[d.charAt(0)];if(y)m=d.match(y[1]),v=y[0];else{for(var b=0;b<i;++b){y=t[b],m=d.match(y[1]);if(m){v=y[0];break}}m||(v=w)}g=v.length>=5&&"lang-"===v.substring(0,5),g&&(!m||typeof m[1]!="string")&&(g=!1,v=x),g||(c[d]=v)}var E=f;f+=d.length;if(!g)a.push(u+E,v);else{var S=m[1],T=d.indexOf(S),N=T+S.length;m[2]&&(N=d.length-m[2].length,T=N-S.length);var C=v.substring(5);k(u+E,d.substring(0,T),s,a),k(u+E+T,S,H(C,S),a),k(u+E+N,d.substring(N),s,a)}}e.decorations=a};return s}function M(e){var t=[],n=[];e.tripleQuotedStrings?t.push([d,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""]):e.multiLineStrings?t.push([d,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):t.push([d,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]),e.verbatimStrings&&n.push([d,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var r=e.hashComments;r&&(e.cStyleComments?(r>1?t.push([m,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):t.push([m,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"]),n.push([d,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,null])):t.push([m,/^#[^\r\n]*/,null,"#"])),e.cStyleComments&&(n.push([m,/^\/\/[^\r\n]*/,null]),n.push([m,/^\/\*[\s\S]*?(?:\*\/|$)/,null]));if(e.regexLiterals){var i="/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";n.push(["lang-regex",new RegExp("^"+REGEXP_PRECEDER_PATTERN+"("+i+")")])}var s=e.types;s&&n.push([g,s]);var o=(""+e.keywords).replace(/^ | $/g,"");return o.length&&n.push([v,new RegExp("^(?:"+o.replace(/[\s,]+/g,"|")+")\\b"),null]),t.push([w,/^\s+/,null," \r\n	Â "]),n.push([y,/^@[a-z_$][a-z_$@0-9]*/i,null],[g,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[w,/^[a-z_$][a-z_$@0-9]*/i,null],[y,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[w,/^\\[\s\S]?/,null],[b,/^.[^\s\w\.$@\'\"\`\/\#\\]*/,null]),O(t,n)}function P(e,t){for(var n=t.length;--n>=0;){var r=t[n];D.hasOwnProperty(r)?window.console&&console.warn("cannot override language handler %s",r):D[r]=e}}function H(e,t){if(!e||!D.hasOwnProperty(e))e=/^\s*</.test(t)?"default-markup":"default-code";return D[e]}function B(e){var t=e.langExtension;try{var n=extractSourceSpans(e.sourceNode),r=n.sourceCode;e.sourceCode=r,e.spans=n.spans,e.basePos=0,H(t,r)(e),recombineTagsAndDecorations(e)}catch(i){"console"in window&&console.log(i&&i.stack?i.stack:i)}}function j(e,t,n){var r=document.createElement("PRE");r.innerHTML=e,n&&numberLines(r,n);var i={langExtension:t,numberLines:n,sourceNode:r};return B(i),r.innerHTML}function F(e){function t(e){return document.getElementsByTagName(e)}function h(){var t=window.PR_SHOULD_USE_CONTINUATION?u.now()+250:Infinity;for(;a<r.length&&u.now()<t;a++){var n=r[a],i=n.className;if(i.indexOf("prettyprint")>=0){var s=i.match(l),o;!s&&(o=A(n))&&"CODE"===o.tagName&&(s=o.className.match(l)),s&&(s=s[1]);var c=!1;for(var p=n.parentNode;p;p=p.parentNode)if((p.tagName==="pre"||p.tagName==="code"||p.tagName==="xmp")&&p.className&&p.className.indexOf("prettyprint")>=0){c=!0;break}if(!c){var d=n.className.match(/\blinenums\b(?::(\d+))?/);d=d?d[1]&&d[1].length?+d[1]:!0:!1,d&&numberLines(n,d),f={langExtension:s,sourceNode:n,numberLines:d},B(f)}}}a<r.length?setTimeout(h,250):e&&e()}var n=[t("pre"),t("code"),t("xmp")],r=[];for(var i=0;i<n.length;++i)for(var s=0,o=n[i].length;s<o;++s)r.push(n[i][s]);n=null;var u=Date;u.now||(u={now:function(){return+(new Date)}});var a=0,f,l=/\blang(?:uage)?-([\w.]+)(?!\S)/,c=/\bprettyprint\b/;h()}var e=["break,continue,do,else,for,if,return,while"],t=[e,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],n=[t,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],r=[n,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],i=[n,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],s=[i,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"],o="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes",u=[n,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],a="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",f=[e,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],l=[e,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],c=[e,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],h=[r,s,u,a+f,l,c],p=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/,d="str",v="kwd",m="com",g="typ",y="lit",b="pun",w="pln",E="tag",S="dec",x="src",T="atn",N="atv",C="nocode";include("regexpPrecederPatterns.pl"),include("combinePrefixPatterns.js"),include("extractSourceSpans.js");var L=/\S/,_=M({keywords:h,hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0});include("numberLines.js"),include("recombineTagsAndDecorations.js");var D={};P(_,["default-code"]),P(O([],[[w,/^[^<?]+/],[S,/^<!\w[^>]*(?:>|$)/],[m,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[b,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]),P(O([[w,/^[\s]+/,null," 	\r\n"],[N,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[E,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[T,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[b,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]),P(O([],[[N,/^[\s\S]+/]]),["uq.val"]),P(M({keywords:r,hashComments:!0,cStyleComments:!0,types:p}),["c","cc","cpp","cxx","cyc","m"]),P(M({keywords:"null,true,false"}),["json"]),P(M({keywords:s,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:p}),["cs"]),P(M({keywords:i,cStyleComments:!0}),["java"]),P(M({keywords:c,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]),P(M({keywords:f,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py"]),P(M({keywords:a,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]),P(M({keywords:l,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]),P(M({keywords:u,cStyleComments:!0,regexLiterals:!0}),["js"]),P(M({keywords:o,hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]),P(O([],[[d,/^[\s\S]+/]]),["regex"]),window.prettyPrintOne=j,window.prettyPrint=F,window.PR={createSimpleLexer:O,registerLangHandler:P,sourceDecorator:M,PR_ATTRIB_NAME:T,PR_ATTRIB_VALUE:N,PR_COMMENT:m,PR_DECLARATION:S,PR_KEYWORD:v,PR_LITERAL:y,PR_NOCODE:C,PR_PLAIN:w,PR_PUNCTUATION:b,PR_SOURCE:x,PR_STRING:d,PR_TAG:E,PR_TYPE:g}}();